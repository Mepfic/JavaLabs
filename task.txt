Лабораторная работа 1.
Создать массив из 10 объектов класса согласно заданию. 
Состав класса Student (студент) фамилия, возраст, наличие задолженностей. Подсчитать средний возраст студентов и количество студентов с задолженностями.

Лабораторная работа № 2. Наследование. Переопределение методов
Задание. Создать соответствующие классы. Определите в каждом классе три перегруженных конструктора: с полным набором параметров, с частью параметров и конструктор по умолчанию. Предусмотреть переопределение методов базового класса в производных классах. Создайте дополнительный класс Runner, в котором задать массив из 10 объектов родительского и дочерних классов, и вывиести инфомацию об объектах посредствам вызова переопределенного метода toString().
Создайте класс «Геометрическая фигура», содержащий следующую информацию: координаты центра на плоскости. Предусмотреть get методы и метод класса «расчет площади». Этот метод должны переопределять производные классы. 
Создайте класс «Треугольник» производный от «Геометрическая фигура» содержит дополнительную информацию: сторона1, сторона2, сторона 3, тип.
Создайте класс «Прямоугольник» производный от «Геометрическая фигура» содержит дополнительную информацию: ширина, высота.
Создайте класс «Окружность» производный от «Геометрическая фигура» содержит дополнительную информацию: радиус.

Лабораторная работа №3
Создать класс согласно заданию. Реализовать создание объектов класса посредствам чтения параметров вводимых пользователем из командной строки. Реализовать сохранение и чтение созданных объектов в(из) файл(а) с использованием механизма сериализации.
Класс Store содержащий поля: название товара, количество на складе, цена за единицу товара. Реализовать подсчет суммарной стоимости товара каждого вида. Реализовать метод toString для вывода суммарной информации об объекте.

Лабораторная работа №4
Модифицировать классы созданные в лабораторной работе №3 добавив обработку исключений при работе с файлами. Создать собственный класс-исключение, обрабатывающий ошибки в производимых вычислениях и внедрить его в проект. 

Лабораторная работа №5
Создать файл в который поместить информацию о объектах класса, описанного в задании. Создать класс согласно заданию. Реализовать интерфейс Comparable и задать условия сортировки по возрастанию для любого текстового поля. Реализовать чтение объектов из файла в коллекцию и отсортировать ее. Результат записать в удобочитаемой форме в другой файл.
Примерный вид файла для чтения/записи для класса Фабрика содержащего поля: название фабрики, количество сотрудников, количество цехов, фамилия директора:
Спартак 1200 4 Иванов
Комунарка 1800 10 Иванов
….. 
Класс Компьютер содержащий поля: частота процессора, оперативная память, видеокарта, производительность (вычислять на основе тактовой частоты процессора по произвольной формуле). Реализовать метод toString для вывода суммарной информации об объекте.

Лабораторная работа №6
Создать класс ClaculatorThread, позволяющий решать поставленную задачу в нескольких потоках с последующей группировкой (сложением, вычитанием, умножением) результатов выполнения потоков.
Создать класс ThreadGenerator, содержащий:
1.	Количество потоков, в которых нужно проводить решение задачи
2.	Наименование действия, которое нужно произвести с результатом, полученным от каждого из потоков (сложение или вычитание или умножение)
3.	Параметры, определяющие границы числового интервала, в котором будет происходить решение задачи (см. условие задачи по вариантам)
4.	Метод execute() – запускающий выполнение решение задачи в указанном количестве потоков
5.	Метод getResult() – возвращающий  итоговый результат решения задачи

Написать программу, реализующую вычисления:
Вычислить произведение четных чисел от 1 до а, где а – число, вводимое пользователем.

Лабораторная работа №7
Написать программу, реализующую получение XML документа по предоставленной ссылке, создать необходимый набор классов, соответствующий структуре документа, и реализовать преобразование XML документа в коллекцию(и) объектов созданных классов с использованием DOM, SAX и StAX парсеров.
1.	http://api.openweathermap.org/data/2.5/weather?q=London,uk&mode=xml&appid=bd82977b86bf27fb59a04b61b657fb6f
2.	http://www.nbrb.by/Services/XmlExRates.aspx
3.	http://www.cbr.ru/scripts/XML_daily.asp
4.	http://belgazprombank.by/export_courses.php
5.	http://news.tut.by/rss/sport.rss
6.	http://news.tut.by/rss/auto.rss
7.	http://news.tut.by/rss/index.rss
8.	http://news.tut.by/rss/auto/road.rss
9.	http://ria.ru/export/rss2/politics/index.xml
10.	http://ria.ru/export/rss2/world/index.xml
11.	http://naviny.by/rss/alls.xml
12.	http://naviny.by/rss/politic.xml

Лабораторная работа №8
Написать программу, реализующую получение JSON документа по предоставленной ссылке, произвести парсинг полученного документа с использованием библиотеки GSON, Сохранить полученные данные в виде HTML страницы-виджета, отображающего погоду в городе. HTML-виджет должен содержать следующие данные о погоде:
•	Название города
•	Код страны в котором он расположен
•	Иконка с отображением текущей погоды
•	Краткое и расширенное описание погоды(днем и ночью) (Пример: Rain. Heavy intensity rain)
•	Текущая температура в градусах Цельсия
•	Давление в мм ртутного столба
•	Влажность в процентах
•	Минимальная и максимальная температура за сегодня
•	Скорость и направление ветра (Пример: 3 m/s SW)
•	Облачность в процентах
Всю необходимую информацию о погоде в формате JSON  можно получить по ссылке вида:
http://api.openweathermap.org/data/2.5/weather?q={CITY_NAME} &mode=json &appid=bd82977b86bf27fb59a04b61b657fb6f
где {CITY_NAME} нужно заменить на название города в соответствии с вариантом задания.
Для получение иконки нужно взять значение JSON документа из поля:
weather[0]->icon или weather[1]->icon
и подставить  вместо {ICON_ID} в следующую ссылку:
http://openweathermap.org/img/w/{ICON_ID}.png
1.	London,uk
2.	NY,us
3.	Moskow,ru
4.	Kiev,ua
5.	Minsk,by
6.	Dalas,us
7.	LA,us
8.	Phoenix,us
9.	Paris,fr
10.	Berlin,de
11.	Gomel,by
12.	Madrid,es

Лабораторная работа 9
Создать проект в соответствии с вариантом задания с использованием базы данных (БД можно выбрать самостоятельно, к примеру SQLite или MySQL). Работу с базой данных организовать посредствам создания класса отвечающего за создание/открытие и закрытие подключений. Все запросы на вставку/изменение данных производить с использованием PreparedStatement. При необходимости использовать трансакции.
Требования к программе:
•	При запуске программы производится проверка существования таблиц, необходимых для работы программы, если таких таблиц не найдено – программа создает их и заполняет таблицы базовым количеством данных (данные для запронения таблицы брать и заранее созданного текстового файла).
•	Все настройки для работы с базой данных хранятся в отдельном файле (.java, .xml или .property)
•	После успешного запуска программа должна производить выборку данных из созданных таблиц(ы)  и выводить полученный результат пользователю в виде таблицы
•	В создаваемых таблицах должен быть уникальный идентификатор (id) с поддержкой автоматического инкремента.
Реализовать таблицу учета выплат сотрудникам предприятия (Поля таблицы: ФИО, должность, выплачено) и вывести их список в порядке убывания выплаты








